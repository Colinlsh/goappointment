// <auto-generated />
using System;
using Appointment.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Appointment.Persistence.Migrations.AppointmentData
{
    [DbContext(typeof(AppointmentDataContext))]
    partial class AppointmentDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Appointment.Domain.Tenant.Activity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ActivityAttendee", b =>
                {
                    b.Property<Guid>("AppUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("AppUserFK", "ActivityFK");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AppUserUsername");

                    b.ToTable("ActivityAttendee", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ActivityPhoto", b =>
                {
                    b.Property<string>("PhotoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ActivityFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoId");

                    b.HasIndex("ActivityFk");

                    b.ToTable("ActivityPhoto", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AdminUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("A");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserProfileFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileFK")
                        .IsUnique();

                    b.ToTable("AdminUser", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AnswerId");

                    b.ToTable("Answer", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppUser", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActiveStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("A");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserProfileFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Username");

                    b.HasIndex("UserProfileFK")
                        .IsUnique();

                    b.ToTable("AppUser", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppUserPhoto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AppUserProfileFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserProfileFK");

                    b.ToTable("AppUserPhoto", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppUserQuestionAnswer", b =>
                {
                    b.Property<Guid>("AppUserProfileFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnswerFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserProfileFK", "QuestionFK", "AnswerFK");

                    b.HasIndex("AnswerFK");

                    b.HasIndex("QuestionFK");

                    b.ToTable("AppUserQuestionAnswer", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentStatusFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CalendarItemFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CancellationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CancellationRequestBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomerTurnUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReScheduled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemainderSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTelegram")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VisitFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CalendarItemFK")
                        .IsUnique();

                    b.ToTable("Appointment", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppointmentCustomerProfile", b =>
                {
                    b.Property<Guid>("AppointmentFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerProfileFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentFK", "CustomerProfileFK");

                    b.HasIndex("CustomerProfileFK");

                    b.ToTable("AppointmentCustomerProfile", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppointmentService", b =>
                {
                    b.Property<Guid>("AppointmentFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SerivceFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentFK", "SerivceFK");

                    b.HasIndex("SerivceFK");

                    b.ToTable("AppointmentService", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppointmentTelegramCustomerProfile", b =>
                {
                    b.Property<Guid>("AppointmentFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TelegramCustomerProfileFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentFK", "TelegramCustomerProfileFK");

                    b.HasIndex("TelegramCustomerProfileFK");

                    b.ToTable("AppointmentTelegramCustomerProfile", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.CalendarItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationHour")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CalendarItem", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.CustomerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerProfile", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId");

                    b.ToTable("Question", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.QuestionAnswer", b =>
                {
                    b.Property<Guid>("QuestionFk")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerFk")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionFk", "AnswerFk");

                    b.HasIndex("AnswerFk");

                    b.ToTable("QuestionAnswer", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppUserUsername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AppUserUsername");

                    b.ToTable("RefreshToken", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Service", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ServiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationHour")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceItem", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ServiceServiceItem", b =>
                {
                    b.Property<Guid>("ServiceFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceItemFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceFK", "ServiceItemFK");

                    b.HasIndex("ServiceItemFK");

                    b.ToTable("ServiceServiceItem", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpenOnSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenOnSunday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenOnWeekends")
                        .HasColumnType("bit");

                    b.Property<int>("OperatingEndHour")
                        .HasColumnType("int");

                    b.Property<int>("OperatingEndMinutes")
                        .HasColumnType("int");

                    b.Property<int>("OperatingStartHour")
                        .HasColumnType("int");

                    b.Property<int>("OperatingStartMinutes")
                        .HasColumnType("int");

                    b.Property<int>("ServiceHoursPerHour")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Store", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.StoreOffDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OffDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StoreFK");

                    b.ToTable("StoreOffDays", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.StoreSpecialOffs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDaily")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OffDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OffEndHour")
                        .HasColumnType("int");

                    b.Property<int>("OffEndMinutes")
                        .HasColumnType("int");

                    b.Property<int>("OffStartHour")
                        .HasColumnType("int");

                    b.Property<int>("OffStartMinutes")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StoreFK");

                    b.ToTable("StoreSpecialOffs", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.TelegramCustomerProfile", b =>
                {
                    b.Property<Guid>("TelegramCustomerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelegramCustomerProfileId");

                    b.ToTable("TelegramCustomerProfile", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.TenantSettings", b =>
                {
                    b.Property<string>("TenantSettingID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantSettingID");

                    b.ToTable("TenantSettings", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("Birthdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<Guid>("CountryFK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000233"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OccupationFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReligionFK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000009"));

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile", "Tenant_001");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ActivityAttendee", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Appointment.Domain.Tenant.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserUsername");

                    b.Navigation("Activity");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ActivityPhoto", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Activity", "Activity")
                        .WithMany("ActivityPhotos")
                        .HasForeignKey("ActivityFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AdminUser", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.UserProfile", "UserProfile")
                        .WithOne("AdminUser")
                        .HasForeignKey("Appointment.Domain.Tenant.AdminUser", "UserProfileFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppUser", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.UserProfile", "UserProfile")
                        .WithOne("AppUser")
                        .HasForeignKey("Appointment.Domain.Tenant.AppUser", "UserProfileFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppUserPhoto", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.UserProfile", "AppUserProfile")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserProfileFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserProfile");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppUserQuestionAnswer", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Answer", "Answer")
                        .WithMany("AppUserQuestions")
                        .HasForeignKey("AnswerFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Domain.Tenant.UserProfile", "AppUserProfile")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("AppUserProfileFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Domain.Tenant.Question", "Question")
                        .WithMany("AppUserAnswers")
                        .HasForeignKey("QuestionFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("AppUserProfile");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Appointment", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.CalendarItem", "CalendarItem")
                        .WithOne("Appointment")
                        .HasForeignKey("Appointment.Domain.Tenant.Appointment", "CalendarItemFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarItem");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppointmentCustomerProfile", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Appointment", "Appointment")
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("AppointmentFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Domain.Tenant.CustomerProfile", "CustomerProfile")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerProfileFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppointmentService", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Appointment", "Appointment")
                        .WithMany("Services")
                        .HasForeignKey("AppointmentFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Domain.Tenant.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("SerivceFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.AppointmentTelegramCustomerProfile", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Appointment", "Appointment")
                        .WithMany("TelegramCustomerProfile")
                        .HasForeignKey("AppointmentFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Domain.Tenant.TelegramCustomerProfile", "TelegramCustomerProfile")
                        .WithMany("Appointments")
                        .HasForeignKey("TelegramCustomerProfileFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("TelegramCustomerProfile");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.QuestionAnswer", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Answer", "Answer")
                        .WithMany("Questions")
                        .HasForeignKey("AnswerFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Domain.Tenant.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.RefreshToken", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserUsername");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ServiceServiceItem", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Service", "Service")
                        .WithMany("ServiceItems")
                        .HasForeignKey("ServiceFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Appointment.Domain.Tenant.ServiceItem", "ServiceItem")
                        .WithMany("Services")
                        .HasForeignKey("ServiceItemFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceItem");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.StoreOffDays", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Store", "Store")
                        .WithMany("OffDays")
                        .HasForeignKey("StoreFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.StoreSpecialOffs", b =>
                {
                    b.HasOne("Appointment.Domain.Tenant.Store", "Store")
                        .WithMany("SpecialOffDays")
                        .HasForeignKey("StoreFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Activity", b =>
                {
                    b.Navigation("ActivityPhotos");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Answer", b =>
                {
                    b.Navigation("AppUserQuestions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Appointment", b =>
                {
                    b.Navigation("CustomerProfiles");

                    b.Navigation("Services");

                    b.Navigation("TelegramCustomerProfile");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.CalendarItem", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.CustomerProfile", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("AppUserAnswers");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ServiceItems");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.ServiceItem", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.Store", b =>
                {
                    b.Navigation("OffDays");

                    b.Navigation("SpecialOffDays");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.TelegramCustomerProfile", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Appointment.Domain.Tenant.UserProfile", b =>
                {
                    b.Navigation("AdminUser");

                    b.Navigation("AppUser");

                    b.Navigation("Photos");

                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
