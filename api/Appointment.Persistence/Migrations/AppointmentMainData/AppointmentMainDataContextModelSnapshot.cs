// <auto-generated />
using System;
using Appointment.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Appointment.Persistence.Migrations.AppointmentMainData
{
    [DbContext(typeof(AppointmentMainDataContext))]
    partial class AppointmentMainDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Appointment.Domain.Main.CTAppointmentStatus", b =>
                {
                    b.Property<Guid>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentStatusId");

                    b.ToTable("CTAppointmentStatus", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.CTCountry", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CountryId");

                    b.ToTable("CTCountry", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.CTOccupation", b =>
                {
                    b.Property<Guid>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OccupationId");

                    b.ToTable("CTOccupation", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.CTRace", b =>
                {
                    b.Property<Guid>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IRISCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RaceId");

                    b.ToTable("CTRace", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.CTRelationship", b =>
                {
                    b.Property<Guid>("RelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RelationshipId");

                    b.ToTable("CTRelationship", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.CTReligion", b =>
                {
                    b.Property<Guid>("ReligionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUserMaintainable")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReligionId");

                    b.ToTable("CTReligion", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.DashboardSuperAdminUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SuperAdminUserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ActiveStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DashboardSuperAdminUser", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SuperAdminUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("SuperAdminUserId");

                    b.ToTable("RefreshToken", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.TenantConfiguration", b =>
                {
                    b.Property<Guid>("TenantConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KioskTenantCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KioskTenantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantMappingFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TenantConfigurationID");

                    b.HasIndex("TenantMappingFK")
                        .IsUnique();

                    b.ToTable("TenantConfiguration", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.TenantMapping", b =>
                {
                    b.Property<Guid>("TenantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DBName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DBServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DBUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DBUserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsMobileEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SchemaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantIndex")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TenantID");

                    b.ToTable("TenantMapping", "AppointmentMain");
                });

            modelBuilder.Entity("Appointment.Domain.Main.RefreshToken", b =>
                {
                    b.HasOne("Appointment.Domain.Main.DashboardSuperAdminUser", "SuperAdminUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("SuperAdminUserId");

                    b.Navigation("SuperAdminUser");
                });

            modelBuilder.Entity("Appointment.Domain.Main.TenantConfiguration", b =>
                {
                    b.HasOne("Appointment.Domain.Main.TenantMapping", "TenantMapping")
                        .WithOne("TenantConfiguration")
                        .HasForeignKey("Appointment.Domain.Main.TenantConfiguration", "TenantMappingFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TenantMapping");
                });

            modelBuilder.Entity("Appointment.Domain.Main.DashboardSuperAdminUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Appointment.Domain.Main.TenantMapping", b =>
                {
                    b.Navigation("TenantConfiguration");
                });
#pragma warning restore 612, 618
        }
    }
}
